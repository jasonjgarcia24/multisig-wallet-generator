/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MultiSig, MultiSigInterface } from "../MultiSig";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_signers",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedTransfer",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientSignatureCount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignatureNonce",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "UnauthorizedSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "__signatureNonces",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "checkNonce",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "checkSigner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "grantSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "revokeSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "signers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "threshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct WithdrawableInfo",
        name: "_info",
        type: "tuple",
      },
      {
        internalType: "bytes[]",
        name: "_signatures",
        type: "bytes[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801562000010575f80fd5b50604051620020ef380380620020ef8339818101604052810190620000369190620004d2565b8383828686815f90816200004b9190620007cc565b5080600190816200005d9190620007cc565b50505060016002819055505f5b8151811015620000b857620000a28282815181106200008e576200008d620008b0565b5b60200260200101516200018f60201b60201c565b8080620000af906200090a565b9150506200006a565b505060405180608001604052808381526020018281526020014681526020013073ffffffffffffffffffffffffffffffffffffffff1681525073__$5d8889f87a0ca5db22f47b5ebe396e9f96$$5d8889f87a0ca5db22f47b5ebe396e9f96$__633c4db27890917f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016106fd92919061122f565b602060405180830381865af4158015610718573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073c9190611280565b90505f5b838390508110156107dd575f84848381811061075f5761075e6112ab565b5b905060200281019061077191906112e4565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505090505f6107c0848361090c565b90506107d0818860400135610931565b8260010192505050610740565b5050600160025f8282546107f19190611373565b92505081905550505050565b5f8160200160208101906108119190610e70565b73ffffffffffffffffffffffffffffffffffffffff16825f0135604051610837906113d3565b5f6040518083038185875af1925050503d805f8114610871576040519150601f19603f3d011682016040523d82523d5f602084013e610876565b606091505b50509050806108b1576040517fbfa871c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6001600581905550565b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254169250508190555050565b5f805f6109198585610949565b9150915061092681610995565b819250505092915050565b61093b8282610afa565b6109458282610b88565b5050565b5f806041835103610986575f805f602086015192506040860151915060608601515f1a905061097a87828585610bd5565b9450945050505061098e565b5f6002915091505b9250929050565b5f60048111156109a8576109a76113e7565b5b8160048111156109bb576109ba6113e7565b5b0315610af757600160048111156109d5576109d46113e7565b5b8160048111156109e8576109e76113e7565b5b03610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f9061145e565b60405180910390fd5b60026004811115610a3c57610a3b6113e7565b5b816004811115610a4f57610a4e6113e7565b5b03610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a86906114c6565b60405180910390fd5b60036004811115610aa357610aa26113e7565b5b816004811115610ab657610ab56113e7565b5b03610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90611554565b60405180910390fd5b5b50565b610b0482826104b0565b610b3a576040517fc4689a5400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4382610464565b610b8457816040517fe74c68bb000000000000000000000000000000000000000000000000000000008152600401610b7b9190610e05565b60405180910390fd5b5050565b6001600882901b1760045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c1115610c0d575f600391509150610ca4565b5f6001878787876040515f8152602001604052604051610c30949392919061159c565b6020604051602081039080840390855afa158015610c50573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c9c575f60019250925050610ca4565b805f92509250505b94509492505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610ce4578082015181840152602081019050610cc9565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d0982610cad565b610d138185610cb7565b9350610d23818560208601610cc7565b610d2c81610cef565b840191505092915050565b5f6020820190508181035f830152610d4f8184610cff565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610d7a81610d68565b8114610d84575f80fd5b50565b5f81359050610d9581610d71565b92915050565b5f60208284031215610db057610daf610d60565b5b5f610dbd84828501610d87565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610def82610dc6565b9050919050565b610dff81610de5565b82525050565b5f602082019050610e185f830184610df6565b92915050565b610e2781610d68565b82525050565b5f602082019050610e405f830184610e1e565b92915050565b610e4f81610de5565b8114610e59575f80fd5b50565b5f81359050610e6a81610e46565b92915050565b5f60208284031215610e8557610e84610d60565b5b5f610e9284828501610e5c565b91505092915050565b5f80fd5b5f60608284031215610eb457610eb3610e9b565b5b81905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610ede57610edd610ebd565b5b8235905067ffffffffffffffff811115610efb57610efa610ec1565b5b602083019150836020820283011115610f1757610f16610ec5565b5b9250929050565b5f805f60808486031215610f3557610f34610d60565b5b5f610f4286828701610e9f565b935050606084013567ffffffffffffffff811115610f6357610f62610d64565b5b610f6f86828701610ec9565b92509250509250925092565b5f8115159050919050565b610f8f81610f7b565b82525050565b5f602082019050610fa85f830184610f86565b92915050565b5f8060408385031215610fc457610fc3610d60565b5b5f610fd185828601610e5c565b9250506020610fe285828601610d87565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061103057607f821691505b60208210810361104357611042610fec565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f61107d601f83610cb7565b915061108882611049565b602082019050919050565b5f6020820190508181035f8301526110aa81611071565b9050919050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6110eb82610cef565b810181811067ffffffffffffffff8211171561110a576111096110b5565b5b80604052505050565b5f61111c610d57565b905061112882826110e2565b919050565b5f60608284031215611142576111416110b1565b5b61114c6060611113565b90505f61115b84828501610d87565b5f83015250602061116e84828501610e5c565b602083015250604061118284828501610d87565b60408301525092915050565b5f606082840312156111a3576111a2610d60565b5b5f6111b08482850161112d565b91505092915050565b6111c281610d68565b82525050565b6111d181610de5565b82525050565b606082015f8201516111eb5f8501826111b9565b5060208201516111fe60208501826111c8565b50604082015161121160408501826111b9565b50505050565b5f819050919050565b61122981611217565b82525050565b5f6080820190506112425f8301856111d7565b61124f6060830184611220565b9392505050565b61125f81611217565b8114611269575f80fd5b50565b5f8151905061127a81611256565b92915050565b5f6020828403121561129557611294610d60565b5b5f6112a28482850161126c565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112611300576112ff6112d8565b5b80840192508235915067ffffffffffffffff821115611322576113216112dc565b5b60208301925060018202360383131561133e5761133d6112e0565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61137d82610d68565b915061138883610d68565b92508282019050808211156113a05761139f611346565b5b92915050565b5f81905092915050565b50565b5f6113be5f836113a6565b91506113c9826113b0565b5f82019050919050565b5f6113dd826113b3565b9150819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f45434453413a20696e76616c6964207369676e617475726500000000000000005f82015250565b5f611448601883610cb7565b915061145382611414565b602082019050919050565b5f6020820190508181035f8301526114758161143c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e677468005f82015250565b5f6114b0601f83610cb7565b91506114bb8261147c565b602082019050919050565b5f6020820190508181035f8301526114dd816114a4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c5f8201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b5f61153e602283610cb7565b9150611549826114e4565b604082019050919050565b5f6020820190508181035f83015261156b81611532565b9050919050565b61157b81611217565b82525050565b5f60ff82169050919050565b61159681611581565b82525050565b5f6080820190506115af5f830187611572565b6115bc602083018661158d565b6115c96040830185611572565b6115d66060830184611572565b9594505050505056fea2646970667358221220fe622bb5490dfe2966b93dcd96ce61148f5729a519613f13a622ac20b2a0cae264736f6c63430008140033";

type MultiSigConstructorParams =
  | [linkLibraryAddresses: MultiSigLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MultiSig__factory extends ContractFactory {
  constructor(...args: MultiSigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, MultiSig__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: MultiSigLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$5d8889f87a0ca5db22f47b5ebe396e9f96\\$__", "g"),
      linkLibraryAddresses["src/cryptography/LibMultiSig.sol:LibMultiSig"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    _name: string,
    _version: string,
    _threshold: BigNumberish,
    _signers: AddressLike[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _version,
      _threshold,
      _signers,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _version: string,
    _threshold: BigNumberish,
    _signers: AddressLike[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _name,
      _version,
      _threshold,
      _signers,
      overrides || {}
    ) as Promise<
      MultiSig & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MultiSig__factory {
    return super.connect(runner) as MultiSig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSigInterface {
    return new Interface(_abi) as MultiSigInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MultiSig {
    return new Contract(address, _abi, runner) as unknown as MultiSig;
  }
}

export interface MultiSigLibraryAddresses {
  ["src/cryptography/LibMultiSig.sol:LibMultiSig"]: string;
}
